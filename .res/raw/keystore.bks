# Built application files
*.apk
*.ap_

# Files for the Dalvik VM
*.dex

# Java class files
*.class

# Generated files
bin/
gen/

# Gradle files
.gradle/
build/

# Local configuration file (sdk path, etc)
local.properties

# Proguard folder generated by Eclipse
proguard/


Attempting to use an intercepting proxy with the default application results in
no response
, where as a
successful
request returns the response data
:
Failure
Success
The Approach
In order to disable the
pinning, one can
disassemble
the application, locate the
method responsible for
pinning control and remove the check
.
The
aim
is to have the client accept your
own
SSL certificate as
valid.
Note
:
the proxy’s certificate
should be installed in the Android trusted certificate store
.
The application needs to be
disassembled
into
Smali
code (based on Jasmin syntax)
(
4
)
.
The Smali code will then be patched to remove the SSL Pinning check and the application reassembled
and repacked.
Reversing
Retrieving
and Disassembling
the APK
After the correct package is located, the APK file can be pulled from the device.
List all installed
packages, find the relevant APK for you
r
desired package and then pull said package off the device.
After pulling ‘/data/app
/com.example.sslpinningexample
-
1.apk’, unzip the APK to retrieve the
classes.dex file.
Baksmali is then run
to disassemble the Dalvik bytecode into Smali.

Attempting to use an intercepting proxy with the default application results in
no response
, where as a
successful
request returns the response data
:
Failure
Success
The Approach
In order to disable the
pinning, one can
disassemble
the application, locate the
method responsible for
pinning control and remove the check
.
The
aim
is to have the client accept your
own
SSL certificate as
valid.
Note
:
the proxy’s certificate
should be installed in the Android trusted certificate store
.
The application needs to be
disassembled
into
Smali
code (based on Jasmin syntax)
(
4
)
.
The Smali code will then be patched to remove the SSL Pinning check and the application reassembled
and repacked.
Reversing
Retrieving
and Disassembling
the APK
After the correct package is located, the APK file can be pulled from the device.
List all installed
packages, find the relevant APK for you
r
desired package and then pull said package off the device.
After pulling ‘/data/app
/com.example.sslpinningexample
-
1.apk’, unzip the APK to retrieve the
classes.dex file.
Baksmali is then run
to disassemble the Dalvik bytecode into Smali.
Patching
Patch at class
instantiation
The first method we will discuss is patching
the file tha
t spawns the HTTPS c
lient. Starting with
MainActivity
.smali
and working back from the onClick method,
we can see that the GET method
i
s responsible for retrieving
https://github.com
:
Further analysis shows the GET meth
od calls the
HttpClientBuilder
class to build the
DefaultHttpClient
.
Default
H
ttp
Client
expects a number of parameters when it is created,
so our goal is to remove the parameter containing the
keystore responsible for
SSL Pinning
(
5
).
Working
through the GE
T method, we see that the
pinCertificates
method of the
HttpClientBuilder
class is called. We will remove this, as well as the
pinCertificate
s
call’s
relevant variables.
